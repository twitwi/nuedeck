#!/usr/bin/env python3
import itertools
import sys


def readFile(path):
    try:
        return open(path, 'r').read()
    except:
        return None

def writeFile(path, content):
    tmp = ',,,,'
    with open(tmp, 'w') as f:
        f.write(content)
    if (readFile(tmp) != readFile(path)):
        with open(path, 'w') as f:
            f.write(content)

def obj_dic(d):
    top = type('new', (object,), d)
    seqs = tuple, list, set, frozenset
    for i, j in d.items():
        setattr(top, i, j)
    return top


ID = lambda v: v
NO = '-'
DEFAULT = 'DEFAULT'
format = '%s-%s%s%s-%s.scss'
info = [
    {
        'name': 'transition',
        'values': 'simple raw horiz3 perpsective'.split(' '),
    },
    {
        'name': 'darkness',
        'values': ['light', 'dark'],
    },
    {
        'name': 'color',
        'values': 'red yellow green cyan blue pink'.split(' '),
        'doc_values': 'red yellow green cyan blue pink <hue:0-360>'.split(' '),
        'patch': {
            'red': 0, 'yellow': 60,
            'green': 120, 'cyan': 180,
            'blue': 240, 'pink': 300,
            DEFAULT: int
        }
    },
    {
        'name': 'draft',
        'values': [NO, 'draft'],
        'doc_values': [NO, 'draft', '<font-suffix>'],
        'patch': {
            NO: '-exo-2',
            'draft': '-draft',
            'walto': '-waltograph',
            DEFAULT: ID
        }
    },
    {
        'name': 'dense',
        'patch': {
            NO: '',
            'dense': '-dense',
        }
    },
    {
        'name': 'tiny',
        'values': [NO, 'tiny'],
        'doc_values': [NO, 'tiny', '<size-with-unit>'],
        'patch': {
            NO: '26px',
            'tiny': '23px',
            DEFAULT: ID
        }
    },
]
for i in info:
    if 'values' not in i:
        i['values'] = [NO, i['name']]
    if 'doc_values' not in i:
        i['doc_values'] = i['values'][:]
    if 'iter_values' not in i:
        i['iter_values'] = i['values'][:]

def main_variations():

    all_possibilities = itertools.product(*map(lambda i: i['iter_values'], info))
    for params in all_possibilities:
        main_single(None, *params)
    print('')

def main_single(out, *params, p='  ', p0=''):
    print(p0 + 'Generating', out, '...')
    d = {}
    for ind,i in enumerate(info):
        iname = i['name']
        v = params[ind]
        if v == NO:
            v = i['values'][0]
        if 'patch' not in i:
            d[iname] = v
        else:
            d[iname+'__raw'] = v
            if v in i['patch']:
                d[iname] = i['patch'][v]
            else:
                d[iname] = i['patch']['DEFAULT'](v)
    del ind, i, iname, v
    if out is None:
        # TODO better name
        out = format % tuple(d[i['name']] for i in info)

    print('\033[F' + p0 + 'Generating', out, '...')

    d = obj_dic(d)
    content = "\n".join([
        '/* This theme is generated by NueDeck theme-builder. */',
        '/*  https://github.com/twitwi/NueDeck  */',
        '/* This is a generated theme with parameters %s */' % (str(params)),
        '',
        '@import "normalize";',
        '@import "theme-chunks";',
        '',
        '@include base();',
        '@include step-opacity(0.1);',
        '',
        '@include transition-%s();' % (d.transition,),
        '@include font%s();' % (d.draft,),
        '@include size(%s);' % (d.tiny,),
        '@include bullets%s();' % (d.dense,),
        '@include %s-colors(%s);' % (d.darkness, d.color),
        '',
        '@include extras(); ',
        '', ''
    ])
    writeFile(out, content)
    print('\033[F' + p0 + 'Generating', out, '...', 'done ✔')

def main_usage(argv, p='  ', p0=''):
    print(p0 + 'Usage:')
    print(p + argv[0], 'all')
    params = map(lambda i: i['name'], info)
    print(p + argv[0], '<out.scss>', *map(lambda n: '<'+n+'>', params))
    for i in info:
        print(p*2 + 'with', '<'+i['name']+'>', 'in', *i['doc_values'])
    print(p0 + 'Example:')
    print(p + argv[0], 'out.scss', *map(lambda i: i['values'][0], info))
    print(p + argv[0], 'out.scss', *map(lambda i: i['values'][-1], info))

if len(sys.argv) == 2 and sys.argv[1] == 'all':
    main_variations()
elif len(sys.argv) == 1:
    main_usage(sys.argv)
else:
    main_single(*sys.argv[1:])
